== PropER

Property based testing is a field of testing that represents a major
improvement over unit testing in many ways. While a unit test will try
one or two possible inputs to a function to ensure that it is doing
the correct thing, a property based testing system will use a set of
rules to apply hundreds or thousands of inputs to a system to ensure
that they all act correctly. 

The problem from the developer's point of view is that this is as this
is a newer form of testing we the programming community may not be as
familar with it and may not understand how and when to best apply it
to get optimal results. 

Furthermore the two main tools (QuickCheck and PropER) both suffer
from a lack of documentation and examples of how to build these
tests for our code


=== What is PropER

NOTE: Like Dialyzer, PropER is a product of the research group of
Kostis Sagonas at Uppsala University and NTUA.


PropER is a testing framework that uses a model to create random
inputs and make sure that the results make sense. The idea is that a
unit test may try a few possible inputs with PropER you can make
hundreds of tests that will hopefully expose any strange corner cases.

However there is an art of how to do this. You need to find a way to
test the code such that you are not testing it against itself. If you
say +f(A) =:= f(A)+ then you probably have not learned very much from
your tests

This can work very well for some types of code but is more difficult
for others, This chapter will explore how I applied PropER to the
+tiny_pq+ library which is used by Chicago Boss s part of its TinyMQ.

TinyMQ has a tree structure in which each element looks like this,
where the keys are integers and the values are a possible list. We
want to generate an initial starting state and then apply an operation
to it and validate the end result. For example one possible operation
is to change the priority of an item. In this case we want to verify
that after we do it that it does not exist in the list for the old
priority but does exist for the new one.

.DataStructure
[source,erlang]
----
3 -> [ 5, 9, 11]
----

=== Installing PropER

=== Setting up basic tests


=== Using types to drive tests

If you can derive your tests directly from the +-spec+ of a function
then you can run that property direclty by using the function
+proper:check_spec/1+ and passing it a MFA tuple. For example this
test checks a function from the Chicago Boss boss_compiler module. As long
as that function's spec defines what it will do completly then this
makes a very good test.

To test a functions spec you can call the command
+proper:check_spec/1+ from the erlang REPL. This will use the function
spec to generate 100 random tests and ensure that they all pass. If
they do not pass it will then try to shrink the failing case. In this
case the function passes all 100 tests so check_spec will return
true. 

[source, erlang]
====
(erlang@sag)4> proper:check_spec({boss_compiler, flatten_token_locations, 1}).
....................................................................................................
OK: Passed 100 test(s).
true
====



.Testing a Function's specs
[source, erlang]
=====

unpack_id_test() ->
    ?assert(proper:check_spec({boss_db_adapter_mongodb,unpack_id, 2},
			      [{to_file, user}])),
    ok.

=====

The problem is that Erlang's functional specs are not always able to
define all that we might want to do. For example there is no way to
say that a binary should only consist of valid UTF-8 strings.  

=== Creating a Custom Property

If you want to test some invariant of a function that can not be
expressed only with the spec of a function then you can create your
own properties of the function for proper to run. The most basic
generator can be done with the +?FORALL/3+ macro as shown in this
example. This macro takes three parameters A tuple of variables that
will be substituted into the function, generators for those variables,
and then a block to test that.

.Basic Generator
=====
prop_reverse_list() ->
   ?FORALL(List, list(any()),
       begin
       L =:= reverse(reverse(List))
    end).

===== 

In this example we only have one variable +List+ which is a list (the
type of the elements does not really matter in this case, so we will
give it a type of "any()", We will then assert that for all lists that
if we reverse them twice we will get the original list back. The block
should return a boolean. 

%%TODO Expand

If we want to limit the generated in lists in some way we can use the
+?IMPLIES/2+ macro which will reject items that do not match. For
example if we want to modify the above property so that we only tests
lists that have a length that is greater than 5 we could do this. When
you run this you will see interspersed into the periods of the test an
+x+ which represent the times that the property rejects the generated macro.


.Basic Generator
=====
prop_reverse_list() ->
   ?FORALL(List, list(any()),
    ?IMPLIES(length(List) > 5,
        begin
            L =:= reverse(reverse(List))
        end)).

===== 

If you have more than one condition then you can stack the implies or
just put all your conditions into an external function that will
return a boolean and use that as your guard clause. 

This is also useful to ensure that an element is not in a dictionary
or other key/value data structure. If you need to ensure that it is
present then generate it and insert it yourself.

==== Testing Reversible Function Pairs

There are many times that we need to test functions that can be
reversed. By reversed what I mean is that +For any I, f(g(I)) =:= I+ For
example a reader and a writer would make a good pair, In theory if we
data any legal data structure, write it out and then read it back in
we should get the original data structure back. 

TODO: SHow database test here


=== How many Tests to run

Property based tests work on the principle that we will create a
number of random tests and ensure that they all pass your model. The
question is how many tests to run, too few and we won't find as many
bugs, too many and the tests will take too long to run. So how to find
the optimal number of tests? 

By default Proper will run 100 tests, and absent some reason to change
it this is probably a good default. Remember that if you are running
it in your CI type system then to will run 100 every time. 

However if your property tends to time out then reducing that number
can help. In the ChicagoBoss Framework there are some tests that we
run only 25 or 40 times as part of our regular build, as anything
larger will cause a timeout. 




=== Running our properties

We may wish to run a property based test from the erlang REPL. by calling
+proper:quickcheck(my_prop())+ This is good for explratory testing and
the like. However you may also wish to run your property based tests
is part of a larger test suite. The easist way to do that is to wrap
it in an eunit assertion like this.

[source, erlang]
=====
delete_test() ->
    ?assert(proper:quickcheck(delete_prop(), [{to_file,user}])),
    ok 

=====

A few things to note, first of all function +proper:quickcheck/2+ will
return true if everything passed so the eunit +?assert+ macro will
run the property.Seconly you will note the option of +{to_file,user}+
this is because eunit will capture output of the tests. By passing the
option we get around this.
       
The other issue is that both proper and eunit define a macro
+?LET+. To ensure that the proper version of this macro is used
include proper before eunit, or you could just have the PropER and
EUnit tests in seperate modules.


=== Using Proper for Integration tests

So far we have covered the case where we are using Proper For what is
in effect unit testing, where we want to ensure that the logic of some
application is correct.

But what if we wish to ensure that for example our connection to the
database is working well. In this case we have an obvious set of
properties that we can exploit, in that we can test that the round
trip to the database works. If we Create a Record, write it to the
database, then read it back from the database it should be the same
(with the possible excpetion of ID columns and timestamps.

In doing this for the Chicago Boss I discovered a major bug in the
MySQL integration. I found that the escaping of strings was not being
done correctly. If you saved the string "\\ " it would strip out the 2
backslashes. I don't think I would have found this by manual testing
but proper found it in the first block of 100 tests. It actually found
it in a much larger string, but then reduced it down to the "\\ " that
I was able to test. Once I had found the problem then actually solving
it was pretty easy.

As for how I solved it I connected boss to a mysql virtual machine
and had a table with the correct fields. Then I used this code to
exercise write a bunch of records to the database and read them back,
with the assumption that the returned value should be the same as the
written value. 

[source,erlang]
----
include::proper/mysql_test.erl[]
----
