== Generating EUnit Code Coverage Reports

Ideally your unit tests should cover all your code, but does it? In
theory if you are doing TDD it should but not everyone does TDD
perfectly, things do get missed. 

In theory you could try to manually match up tests with lines of code
covered, but that just sound tedious and error prone so I for one am
not going to do it. What I want is a nice tool to run my tests and
then tell me what my coverage level is and let me see what lines of
code are covered by my test suite and what lines are not.


To do this we can use the +cover+ module which is provided as part of
the Erlang standard library. In order to create a code coverage report
we need to compile the modules to be reported on specifically for code
coverage with the +cover:compile/1+ function. If you have a bunch of
files to compile you can use +cover:compile_directory/1+ or
+cover:compile_beam_directory/1+ functions (There are a number of
other options as well, see the documentation for details.)

A coverage report can be generated in several formats, you can
ask +cover+ to report by line, function or clause, all have their
uses. 

For this report I want to run all my tests and then generate a report
of all lines of code that have no coverage in the tests. The +cover+
module is already smart enough to not to report on non code lines. 

This code reports missing coverage in a format that emacs can
understand, so if you run it from a Makefile in emacs then you can
jump to each uncovered line and see what it is.  In addition this
script is setup to not report on test modules. So if a module's name
ends in +_test+ it will ignore it.


.eunit_cover.erl
----
include::eunit_code_coverage/src/eunit_cover.erl[source, erlang]
----

This module will produce output like this.

----
src/util.erl:12: No Code Coverage
src/util.erl:15: No Code Coverage
src/util.erl:16: No Code Coverage
src/util.erl:17: No Code Coverage
4 Uncovered lines


----



