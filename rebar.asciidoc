== Building Projects with Rebar 

Rebar is a build tool from the good folks at Basho that makes building
and testing your project much easier. Rebar can find all the
dependencies of your project, download them from GitHub or other
sources, compile, build, test and package them for distribution.

For this book we are interested in how to gather dependencies, build
and run our tests. 

Rebar configuration is done with a _rebar.config_ file in the project
root directory. The _rebar.config_ file is at its core a set of Erlang
terms that describe the project. There are a number of options that
are in common usage. 

If your project contains a number of sub directories then use the
_{sub_dirs, []}_ directive to list the directories in which each
part of the project will live in.

In addition if your project is dependent on external libraries (as
most are) then you can list those in the _{deps, []}_ directive. It
will look like this example.

--------
{deps, [
        {webmachine,    "1.9.*",        {git, "git://github.com/basho/webmachine",				"HEAD"}},
        {jsx,           ".*",           {git, "git://github.com/talentdeficit/jsx.git",                         "HEAD"}},
        {jsxd,          ".*",           {git, "git://github.com/Licenser/jsxd.git",				"HEAD"}}]}.
--------
#TODO: Explain the format of the deps directive

To actually download the dependencies run _rebar get_deps_ it will go
and clone all of the repositories from github or other online sources
into your _deps_ directory. In addition it will also download any of
the dependencies of those projects. 

 
This can also be a good way to break apart a large project. By
creating several smaller applications each with their own repository
and then pull them together with rebar. This means that each project
will stand alone and can be built and tested in isolation. This is a
good way to deal with a long build process. By having 10-12 git
repositories each with their own tests and CI jobs it will ensure that
CI does not get out of hand.
