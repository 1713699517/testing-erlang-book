
== Building Tests With EUnit

=== Basics of Writing Tests 
	  
The most basic of any group of tests will be the unit test. Unit tests
should be to validate the basic logic of the application. For building
Unit tests in Erlang the normal tool is EUnit which comes as a
standard part of the Erlang distribution.

Tests in EUnit can be created in the same module as the code to be
tested or in a separate module. If the tests are in their own module
then all the functions to be tested must be exported for the tests to
work. However it is possible to compile the module with a +export_all+
directive for testing. If the tests are in their own module then that
module should be named the same at the module to be tested but with
the suffix +_test+. So a module +square+ will have tests in
+square_test+.

However there is no reason that there be a one to one correspondence
between test modules and production modules. If having the tests for
one module spread over two or more files makes sense then EUnit will
let you do that.

When building a test moudle the first thing that you should do is include the
file +eunit/include/eunit.hrl+ which contains all the macros that are
used by EUnit. After that the test module should define a set of
functions each with a name ending in "_test" that define the actual
tests. 

To Illustrate this lets define a very simple module +square+ that
contains a simple function +square/1+ that takes a number and squares
it.  

.square.erl
----

include::eunit/src/square.erl[source, erlang]
----

To test this code we need a test script like +square_test+ 

.square_test.erl
----

include::eunit/src/square_test.erl[source, erlang]
----

=== EUnit Assertions

A test will fail if the process exits, this could be from calling the
Erlang BIF +exit/1+ or other error, including a failed pattern
match. However using assertions will in general result in a more
readable error report so it should be generally preferred.

EUnit features a number of assertions for determining if a test has
passed. All of these are implemented as processor macros via the
+eunit.hrl+ file. 

The most basic assertion is +?assert/1+ which will pass if the value
is true and fail otherwise. There is also an +?assertNot/1+ which will
pass if the value is false

The next form is +?assertEqual/2+ which takes an expected value and an
expression for example +?asssertEqual(4, square:square(2))+ will pass
and +?assertEqual(5, square:square(2))+ will fail. 

If you want to assert that something matches a pattern you can use the
+?assertMatch/2+ macro which will assert that the returned value
matches a guard expression.

*TODO Example*

In addition you will want to test for error conditions. There are four
macros to test for an error +?assertException/2+, +assertError/2+,
+assertExit/2+, and +assertThrow/2+.

*TODO Example*



=== Running Tests

There are a few ways to run a test suite in EUnit. First of all you
can call +module:test()+ to run the tests in the +square_test+ module
run the function +square_test/0+ from the REPL. You can also run tests
by calling the function +eunit:test/1+ and passing the name of the
test module. So in this case you can call +eunit:test(square_test)+. 

When tests run there are two possible results, the first is that all
tests pass in which case you will get a result like this:

.All Pass
----
  All 58 tests passed.
----

If a test fails then EUnit will return a result like this. There are
two possible ways a test can fail. The first is that it fails to match
an assertion made with one of the EUnit macros, In that case the you
will see an error like the first failure here. It will list the line,
the expression and other data that will help you figure out what went
wrong.

In the second case the test code called +exit(test)+ which causes the
test to fail but does not give any of the information that the
+?assert()+ family of macros gives. Any un caught failure including an
Exit will result in a failed test.

.Failure
----
my_list_test: in_list_one_element_list_present_test...*failed*
::{assertEqual_failed,[{module,my_list_test},
                     {line,12},
                     {expression,"r"},
                     {expected,3},
                     {value,r}]}


my_list_test: in_list_two_elements_list_present_test...*failed*
::test


=======================================================
  Failed: 2.  Skipped: 0.  Passed: 57.
----



Normally when running tests all tests that pass are not shown (after
all there may be a large number of them). To show them call the
function +eunit:test/2+ with the second parameter being set to
+[verbose]+ this will show all the tests and will also show timing
information on the tests.


If you have a whole directory of tests and wish to run them as a group
you can call the +eunit:test/1,2+ functions with the name of the
directory instead of a file this will cause EUnit to run all tests in
a directory.

If you wish to run a test from the unix command line you can start the
tests on load with the erlang +-run+ command parameter. I generally
have wrapped my test runner into a custom function that will run the
tests and then call +init:stop/0+ to cause Erlang to exit. 

I like to run my tests from a Makefile as in this example. The
Makefile will build everything that may need it and then start erlang
and run the test suite. The Erlang compiler can output create Makefile
directives for each source file to track dependencies of include files
if needed.

.Makefile
----
include::eunit/src/Makefile[source, make]
----

.tests.erl
----
include::eunit/src/tests.erl[source, erlang]
----

If you are building your project with +rebar+ then running your tests
is as simple as running +rebar eunit+. It will then build everything
and run all the eunit tests in your project. By default if you do this
it will run all the tests for any dependencies you may have. Normally
you probably do not want to do this as it can take a while to run, so
use the command +rebar eunit skip_deps=true+ which will cause rebar to
only run the tests of the actual project.

=== Code Coverage 

Ideally you want your unit tests to cover as much of your project as
you can have. However there is an issue of how do you figure out what
parts of your code base are covered? The practical way is to have your
code base tell you.If you are running your tests with rebar then you
can add the following directive to your +rebar.config+ file and it
will create HTML pages that will tell you what is and is not covered.

.rebar.config
-----
{cover_enabled, true}.
-----

TODO: Example screenshot

=== Test Generators

=== Setup and Cleanup (Fixtures)

Often when running tests we want to have some form of setup and
cleanup happen before and after each test. For example The setup code
could create a Mnesia or ETS table and the cleanup code can delete
it. In order to do this we need to use a test generator instead of a
basic test.

In +fixtures.erl+ we use have a generator that returns the tuple
+{setup, setup/0, cleanup/1, ?_test()}+ which is the actual test. In
this case +setup/0+ and +cleanup/1+ are called before and after each
test. 

.fixtures.erl
----
include::eunit/src/fixtures.erl[source, erlang]
----


=== Macros For Debugging

