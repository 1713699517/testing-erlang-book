== Stress Tests and Performance Tests\

Unit tests <xref linkend='eunit'/> are great in that they tell you if
your code is working correctly. They are also nice in that a new team
member can look at a result of a unit test run and know if the tests
passed or failed.


Performance testing is a whole different thing. While Unit tests are
binary in their results (pass or fail) a performance test is very much
analog. If I tell you that a system can handle "5,000 concurrent users
with a mean response time of 145ms+/- 32ms on an Amazon EC2 Large
Instance"<footnote><para>Assume numbers in this chapter are completely
made up unless noted otherwise.</para></footnote> is that good or bad?
It would be impossible to tell without a detailed understanding of the
goals of the system. However understanding how a system will perform
under load is an essential part of any system that will be deployed..

At some point the developers of a system will have to turn it over to
an operations team and they will need to do things like determine how
many servers are needed to support the expected load of customers.

In order to create a performance test it is important to understand
what kinds of work loads are going to be using the service. For
example a poker server will be dividing users up into tables with 2-10
players and players will act in turn. To simulate this you will want a
client that can act like a poker player in terms of performing
actions, in that at the correct time they should act in the game. In
this case we may find that on a given server our software can support
750 tables for a total of 7500 players.
