== CI With Jenkins or Travis-ci

There are a number of CI packages out there that can work with Erlang,
including Travis-ci, circle-ci and Jenkins-ci. At the most basic level
they all do about the same job. They watch the project repository for
changes and when they see one they grab the code, compile build and
test it as so to report any build problems to the team. 

In many projects this build will include Erlang, as well as other
kinds of code, which may include Java, Ruby, JavaScript or other
languages. As such most CI solutions will support and have guides for
a number of languages. When choosing a CI solution it is worthwhile to
check that all required languages are supported and that there are
decent guides to how to use them with that setup. 

In addition CI systems come in two major types, SAAS CI and hosted
CI. Travis-CI is a SAAS service, which is to say that it runs on the
Their servers and you can point it at your Github Repository for
testing. Travis is free for Open Source Projects and costs money for
closed source projects.


In order to use a CI solution we first need a repository, as our goal
here is to setup CI and test it we will go with a very simple
repository called "increment-ci"
https://github.com/zkessin/increment-ci which will contain a single
Erlang module with 1 function that only adds one. Our goal here is to
simply demonstrate how our CI System works so there is no reason to
use a complex setup.

=== Using Travis-CI 

Using Travis-CI is relativly easy. However there are a few
requirements to use Travis-CI. First of all your project must be
hosted on github, which is pretty common these days. 

Secondly you must include a file in the root of the directory called
+.travis.yml+ which will tell travis how to build your
application. Assuming that you are using rebar as a build tool this is
pretty easy, and it should generally look like this example.

.Example .travis.yml
[source, yml]
------
language    : erlang
script      : rebar compile && rebar  eunit
otp_release :
  - R15B02
------

Of course there are many more options you can use to build your
project but this covers the basics.

You then must go to the travis-ci site (https://travis-ci.org) and
sign in with your github account. When you do that it will query a
list of your projects and you can enable CI on the projects you
choose. 

After you enable travis-ci on your repository it will compile and test
it every time you do a push. 

NOTE: when you first enable Travis-ci it will not run the tests until
you do a push to your repository. 


Another nice feature of travis-ci is that if you are building an open
source library that must work with multiple versions of Erlang and OTP
you can specify several versions of OTP with the _otp_release_ option
in the +.travis.yml+ file. If you do this it will run a separate job
for each version of OTP and let you know if any of them fail.  

WARNING: As of this writing travis-ci does not work with Erlang
R15B03, R15B02 does work. 

The one downside of Travis-CI is that if you are not building an open
source project then you have to pay to use their hosted service. 

NOTE: TODO Exapand that


=== Using Jenkins-CI

Jenkins CI is a more traditional software package in that they assume
you will download their code and install it on your own server (which
can be a cloud server). However if you want a very easy install of
Jenkins CI consider using the Turnkey Linux Appliance
http://www.turnkeylinux.org/jenkins which can be downloaded and run
under XEN, VMWare or several other types of Virtual Machine.

I found that downloading and installing Jenkins-CI under VMWare was pretty
easy, however it does come with an out of date version of Jenkins-CI
that will have to be updated. This can be done by replacing the
+jenkins.war+ file with the current version and rebooting the
appliance. 


First of all if you are using Jenkins-CI you will have to do a bit of
manual setup. Jenkins was originally for use with Java and Ant/Maven
projects, so you may have to coach it a bit to get it to speak erlang.

In the turnkey linux install the first thing I had to do was to login
as root and install erlang and rebar. Once this was done I was able to
check my code out of the git repository and get it to build without
too much problem. It did take a few attempts while I did things like
set paths to binaries and the like. Once this was done I found that
Jenkins was able to watch my github repository and report on any
problems. It understood the output of rebar and eunit. *EXPAND*

If you are hosting your project somewhere other than GitHub then
Jenkins will still be able to help you. In addition to git Jenkins
knows how to talk to SVN and HG as well as several other version
control systems. 

*TODO Private Github Repository*

*TODO setup walk threw* 



